{"version":3,"file":"static/js/587.f6bcbd3e.chunk.js","mappings":"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","sources":["data/cityData.js","scenes/store/StoreListModal.jsx","../node_modules/@mui/material/useMediaQuery/useMediaQuery.js","scenes/store/CreateStoreModal.jsx","scenes/store/CreateStoreModal_B.jsx","scenes/store/StoreManagement.jsx"],"sourcesContent":["export const areaData = {\n  '台北市': [\n    '中正區', '大同區', '中山區', '萬華區', '信義區', '松山區', '大安區', '南港區', '北投區', '內湖區', '士林區', '文山區'\n  ],\n  '新北市': [\n    '板橋區', '新莊區', '泰山區', '林口區', '淡水區', '金山區', '八里區', '萬里區', '石門區', '三芝區', '瑞芳區', '汐止區', '平溪區', '貢寮區', '雙溪區', '深坑區', '石碇區', '新店區', '坪林區', '烏來區', '中和區', '永和區', '土城區', '三峽區', '樹林區', '鶯歌區', '三重區', '蘆洲區', '五股區'\n  ],\n  '基隆市': [\n    '仁愛區', '中正區', '信義區', '中山區', '安樂區', '暖暖區', '七堵區'\n  ],\n  '桃園市': [\n    '桃園區', '中壢區', '平鎮區', '八德區', '楊梅區', '蘆竹區', '龜山區', '龍潭區', '大溪區', '大園區', '觀音區', '新屋區', '復興區'\n  ],\n  '新竹縣': [\n    '竹北市', '竹東鎮', '新埔鎮', '關西鎮', '峨眉鄉', '寶山鄉', '北埔鄉', '橫山鄉', '芎林鄉', '湖口鄉', '新豐鄉', '尖石鄉', '五峰鄉'\n  ],\n  '苗栗縣': [\n    '苗栗市', '通霄鎮', '苑裡鎮', '竹南鎮', '頭份鎮', '後龍鎮', '卓蘭鎮', '西湖鄉', '頭屋鄉', '公館鄉', '銅鑼鄉', '三義鄉', '造橋鄉', '三灣鄉', '南庄鄉', '大湖鄉', '獅潭鄉', '泰安鄉'\n  ],\n  '台中市': [\n    '中區', '東區', '南區', '西區', '北區', '北屯區', '西屯區', '南屯區', '太平區', '大里區', '霧峰區', '烏日區', '豐原區', '后里區', '石岡區', '東勢區', '和平區', '新社區', '潭子區', '大雅區', '神岡區', '大肚區', '沙鹿區', '龍井區', '梧棲區', '清水區', '大甲區', '外埔區', '大安區'\n  ],\n  '彰化縣': [\n    '彰化市', '員林市', '和美鎮', '鹿港鎮', '溪湖鎮', '二林鎮', '田中鎮', '北斗鎮', '花壇鄉', '芬園鄉', '大村鄉', '永靖鄉', '伸港鄉', '線西鄉', '福興鄉', '秀水鄉', '埔心鄉', '埔鹽鄉', '大城鄉', '芳苑鄉', '竹塘鄉', '社頭鄉', '二水鄉', '田尾鄉', '埤頭鄉', '溪州鄉'\n  ],\n  '南投縣': [\n    '南投市', '埔里鎮', '草屯鎮', '竹山鎮', '集集鎮', '名間鄉', '鹿谷鄉', '中寮鄉', '魚池鄉', '國姓鄉', '水里鄉', '信義鄉', '仁愛鄉'\n  ],\n  '彰化縣': [\n    '彰化市', '員林鎮', '和美鎮', '鹿港鎮', '溪湖鎮', '二林鎮', '田中鎮', '北斗鎮', '花壇鄉', '芬園鄉', '大村鄉', '永靖鄉', '伸港鄉', '線西鄉', '福興鄉', '秀水鄉', '埔心鄉', '埔鹽鄉', '大城鄉', '芳苑鄉', '竹塘鄉', '社頭鄉', '二水鄉', '田尾鄉', '埤頭鄉', '溪州鄉'\n  ],\n  '雲林縣': [\n    '斗六市', '斗南鎮', '虎尾鎮', '西螺鎮', '土庫鎮', '北港鎮', '莿桐鄉', '林內鄉', '古坑鄉', '大埤鄉', '崙背鄉', '二崙鄉', '麥寮鄉', '台西鄉', '東勢鄉', '褒忠鄉', '四湖鄉', '口湖鄉', '水林鄉', '元長鄉'\n  ],\n  '嘉義縣': [\n    '太保市', '朴子市', '布袋鎮', '大林鎮', '民雄鄉', '溪口鄉', '新港鄉', '六腳鄉', '東石鄉', '義竹鄉', '鹿草鄉', '水上鄉', '中埔鄉', '竹崎鄉', '梅山鄉', '番路鄉', '大埔鄉', '阿里山鄉'\n  ],\n  '嘉義市': [\n    '東區', '西區'\n  ],\n  '台南市': [\n    '中西區', '東區', '南區', '北區', '安平區', '安南區', '永康區', '歸仁區', '新化區', '左鎮區', '玉井區', '楠西區', '南化區', '仁德區', '關廟區', '龍崎區', '官田區', '麻豆區', '佳里區', '西港區', '七股區', '將軍區', '學甲區', '北門區', '新營區', '後壁區', '白河區', '東山區', '六甲區', '下營區', '柳營區', '鹽水區', '善化區', '大內區', '山上區', '新市區', '安定區'\n  ],\n  '高雄市': [\n    '楠梓區', '左營區', '鼓山區', '三民區', '鹽埕區', '前金區', '新興區', '苓雅區', '前鎮區', '小港區', '旗津區', '鳳山區', '大寮區', '鳥松區', '林園區', '仁武區', '大樹區', '大社區', '岡山區', '路竹區', '橋頭區', '梓官區', '彌陀區', '永安區', '燕巢區', '田寮區', '阿蓮區', '茄萣區', '湖內區', '旗山區', '美濃區', '內門區', '杉林區', '甲仙區', '六龜區', '茂林區', '桃源區', '那瑪夏區'\n  ],\n  '屏東縣': [\n    '屏東市', '潮州鎮', '東港鎮', '恆春鎮', '萬丹鄉', '長治鄉', '麟洛鄉', '九如鄉', '里港鄉', '鹽埔鄉', '高樹鄉', '萬巒鄉', '內埔鄉', '竹田鄉', '新埤鄉', '枋寮鄉', '新園鄉', '崁頂鄉', '林邊鄉', '南州鄉', '佳冬鄉', '琉球鄉', '車城鄉', '滿州鄉', '枋山鄉', '霧台鄉', '瑪家鄉', '泰武鄉', '來義鄉', '春日鄉', '獅子鄉', '牡丹鄉', '三地門鄉'\n  ],\n  '宜蘭縣': [\n    '宜蘭市', '羅東鎮', '蘇澳鎮', '頭城鎮', '礁溪鄉', '壯圍鄉', '員山鄉', '冬山鄉', '五結鄉', '三星鄉', '大同鄉', '南澳鄉'\n  ],\n  '花蓮縣': [\n    '花蓮市', '鳳林鎮', '玉里鎮', '新城鄉', '吉安鄉', '壽豐鄉', '秀林鄉', '光復鄉', '豐濱鄉', '瑞穗鄉', '萬榮鄉', '富里鄉', '卓溪鄉'\n  ],\n  '台東縣': [\n    '台東市', '成功鎮', '關山鎮', '長濱鄉', '海端鄉', '池上鄉', '東河鄉', '鹿野鄉', '延平鄉', '卑南鄉', '金峰鄉', '大武鄉', '達仁鄉', '綠島鄉', '蘭嶼鄉', '太麻里鄉'\n  ],\n  '澎湖縣': [\n    '馬公市', '湖西鄉', '白沙鄉', '西嶼鄉', '望安鄉', '七美鄉'\n  ],\n  '金門縣': [\n    '金城鎮', '金湖鎮', '金沙鎮', '金寧鄉', '烈嶼鄉', '烏坵鄉'\n  ],\n  '連江縣': [\n    '南竿鄉', '北竿鄉', '莒光鄉', '東引鄉'\n  ]\n};","import React, { useState, useEffect, useRef } from \"react\";\nimport { Box, Button, FilledInput, FormControl, FormHelperText, IconButton, InputAdornment, InputLabel, MenuItem, Select, TextField, Typography, useTheme } from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport \"../../components/Modal/modal.css\";\nimport { tokens } from \"../../theme\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { GetStore, UpdateStore, RemoveStore, UnbanStore } from \"../../graphQL/Queries\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport ConfirmModal from \"../../components/Modal/ConfirmModal\";\nimport { areaData } from \"../../data/cityData\";\nimport { default_cover_900x300_filename } from \"../../data/strings\";\nimport CoverUpload from \"../../components/Upload/CoverUpload\";\nimport { getImgURL, replaceNullWithEmptyString } from \"../../utils/Utils\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport Loader from \"../../components/loader/Loader\";\nimport Error from \"../../components/error/Error\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from 'react-i18next';\n\nconst checkoutSchema = yup.object().shape({\n    name: yup.string().required(\"required\"),\n    status: yup.string().required(\"required\"),\n    // intro: yup.string().required(\"required\"),\n    brandId: yup.string().required(\"required\"),\n    brandName: yup.string().required(\"required\"),\n    // location_address: yup.string().required(\"required\"),\n    principalName: yup.string().required(\"required\"),\n    // principalPassword: yup.string().required(\"required\"),\n    principalLineUrl: yup.string().required(\"required\"),\n    principalEmail: yup.string().email(\"invalid email\"),\n});\n\n\nexport default function StoreListModal({ props }) {\n    const { entityName } = useSelector((state) => state.entity);\n    const { t } = useTranslation();\n\n    const theme = useTheme();\n    const colors = tokens(theme.palette.mode);\n    const [modal, setModal] = useState(false);\n    const [status, setStatus] = useState('disable');\n    const handleStatusChange = (event) => {\n        setStatus(event.target.value);\n    };\n\n    //  ========================== PASSWORD VISIBILITY ==========================\n    const [showPassword, setShowPassword] = useState(false);\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    var btnTitle = t(\"update\"), confirmTitle = t(\"confirm\"), deleteTitle = t(\"delete\"), banTitle = t(\"remove\"), unbanTitle = t(\"ban\");\n\n\n    // ========================== CITY ==========================\n    const [cityFilter, setCityFilter] = useState('');\n    const [areaFilter, setAreaFilter] = useState([]); // list of area based on the city\n    const [selectedArea, setSelectedArea] = useState(''); // selected area\n\n    const handleCityChange = (event) => {\n        setCityFilter(event.target.value);\n        setAreaFilter(areaData[event.target.value]);\n        setSelectedArea('');\n    };\n    const handleAreaChange = (event) => {\n        setSelectedArea(event.target.value);\n    };\n\n\n    const [inputAddress, setInputAddress] = useState(\"\"); // FOR DISPLAYING WHAT USER TYPE IN ADDRESS SEARCH BAR\n    const [{ address, coordinates }, setLocation] = useState({\n        address: \"\",\n        coordinates: {\n            lat: 0,\n            lng: 120,\n        }\n    });\n\n\n\n\n    const [initialValues, setInitialValues] = useState({\n        id: -1,\n        brandId: -1,\n        brandName: \"\",\n        name: \"\",\n        intro: \"\",\n        //locations get from location state\n        status: \"\",\n\n\n        principalName: \"\",\n        principalAccount: \"\",\n        principalPassword: \"\",\n        principalLineUrl: \"https://lin.ee/\",\n        principalEmail: \"\",\n    });\n\n\n    // =================================================================================\n    // REMOVE STORE MUTATION\n    const [ApolloRemoveStore, { loading, error, data }] = useLazyQuery(RemoveStore);\n    useEffect(() => {\n        if (data) {\n            console.log(\"REMOVE SUCCESS\");\n            window.location.reload();\n        }\n    }, [data]);\n\n\n    //UPDATE STORE MUTATION\n    const [ApolloUpdateStore, { loading: loading2, error: error2, data: data2 }] = useLazyQuery(UpdateStore);\n    useEffect(() => {\n        if (data2) {\n            window.location.reload();\n            console.log(\"UPDATE SUCCESS\")\n        }\n    }, [data2]);\n\n    // INITIAL VALUES FROM GET STORE QUERY\n    const { loading: loading3, error: error3, data: data3 } = useQuery(GetStore\n        , {\n            variables: {\n                args: [\n                    {\n                        id: props.id\n                    }\n                ],\n            }\n        }\n    );\n    useEffect(() => {\n        if (data3) {\n            // SET THE initial value using data3\n            const nonNullData = replaceNullWithEmptyString(data3.getStore[0]);\n            setInitialValues({\n                id: props.id,\n                status: nonNullData.status.name,\n                name: nonNullData.name,\n                intro: nonNullData.intro,\n                brandId: nonNullData.brand.id,\n                brandName: nonNullData.brand.name,\n                // city, district, and address is used in state\n                principalName: nonNullData.principal.name,\n                principalAccount: nonNullData.principal.account,\n                principalEmail: nonNullData.principal.email,\n                principalPassword: \"\",\n                // princiapall password doesnt receive api data\n                principalLineUrl: nonNullData.principal.lineUrl,\n            });\n\n            if (data3.getStore[0].cover !== null || (data3.getStore[0].cover !== \"null\")) {\n                setCoverFileName(data3.getStore[0].cover);\n            }\n\n            //set city\n            setCityFilter(data3.getStore[0].location.city);\n            //set area\n            setAreaFilter(areaData[data3.getStore[0].location.city]);\n            setSelectedArea(data3.getStore[0].location.district);\n            //set location\n            setLocation((prevState) => ({\n                ...prevState,\n                address: data3.getStore[0].location.address,\n            }));\n            //set status only if not banned\n            if (data3.getStore[0].status.name !== \"banned\") {\n                setStatus(data3.getStore[0].status.name)\n            }\n        }\n    }, [data3]);\n\n\n\n\n\n    const handleLocationSelect = async value => {\n        const results = await geocodeByAddress(value);\n        const formattedAddress = results[0].address_components[0].long_name + results[0].address_components[1].long_name;\n        const latLng = await getLatLng(results[0]);\n        const city = results[0].address_components[4].long_name;\n        const district = results[0].address_components[3].long_name;\n\n        setInputAddress(value);\n        setLocation({\n            address: formattedAddress,\n            coordinates: latLng\n        });\n\n        if (city in areaData) {\n            setCityFilter(city); // SET THE CITY FILTER TO THE CITY OF THE SELECTED LOCATION\n            // SET THE AREA FILTER TO THE AREA OF THE SELECTED LOCATION\n            setAreaFilter(areaData[city]);\n            setSelectedArea(district); // SET THE SELECTED AREA TO THE AREA OF THE SELECTED LOCATION\n        }\n\n\n        console.log(\"city\" + city + \"district\" + district + \"Coordinate:\" + coordinates.lat + \",\" + coordinates.lng);\n        //this.props.onAddressSelected();\n    };\n\n    const handleDelete = () => {\n        var result = window.confirm(\"Are you sure you want to delete this store?\");\n        if (result) {\n            ApolloRemoveStore({\n                variables: {\n                    args: [\n                        {\n                            id: props.id\n                        }\n                    ]\n                }\n            })\n        }\n    };\n\n    // UNBAN MUTATION\n    const [ApolloUnBanStore, { loading: loading4, error: error4, data: data4 }] = useLazyQuery(UnbanStore);\n    useEffect(() => {\n        if (data4) {\n            window.location.reload();\n        }\n    }, [data4]);\n    const handleUnBan = (e) => {\n        var result = window.confirm(\"Are you sure you want to unban this store?\");\n        if (result) {\n            ApolloUnBanStore({\n                variables: {\n                    args: [\n                        {\n                            id: props.id\n                        }\n                    ],\n                    reason: \"null\"\n                }\n            })\n            console.log(\"unbaned\");\n        }\n    }\n\n\n    const [coverFileName, setCoverFileName] = useState(default_cover_900x300_filename);\n    const handleUploadCoverSucess = (name) => {\n        setCoverFileName(name);\n    };\n\n\n    const handleFormSubmit = (values) => {\n        const variables = {\n            args: [\n                {\n                    id: values.id\n                }\n            ],\n            name: values.name,\n            cover: coverFileName,\n            location: {\n                city: cityFilter,\n                district: selectedArea,\n                address: address,\n                description: \"NONE\"\n            },\n            principal: {\n                name: values.principalName,\n                lineUrl: values.principalLineUrl,\n            }\n        };\n\n        if (values.intro !== \"\") {\n            variables.intro = values.intro;\n        }\n        if (values.principalEmail !== \"\") {\n            variables.principal.email = values.principalEmail;\n        }\n\n\n        // if coordinate is not updated\n        if (coordinates.lat !== 0 && coordinates.lng !== 120) {\n            variables.location.coordinate = {\n                latitude: coordinates.lat,\n                longitude: coordinates.lng,\n            };\n        }\n\n        //if password is empty, dont update password\n        if (values.principalPassword !== \"\") {\n            variables.principal.password = values.principalPassword;\n        }\n\n        //if status is not banned, update status\n        if (initialValues.status !== \"banned\") {\n            variables.statusId = status;\n        }\n        ApolloUpdateStore({ variables });\n    };\n\n    const toggleModal = () => {\n        setModal(!modal);\n    };\n    if (modal) {\n        document.body.classList.add('active-modal')\n    } else {\n        document.body.classList.remove('active-modal')\n    }\n\n\n    if (loading) return <Loader />;\n    if (error) return <Error />;\n\n    return (\n        <>\n            {/* THE CONTENT OF THE BUTTON */}\n            <Button onClick={toggleModal} className=\"btn-modal\" sx={{ color: colors.primary[100], border: \"1px solid #111\", borderColor: colors.blueAccent[100] }}>{btnTitle}</Button>\n\n            {/* CONTENT OF WHAT HAPPEN AFTER BUTTON CLICKED */}\n            {modal && (\n                <Box className=\"modal\">\n                    <Box onClick={toggleModal} className=\"overlay\"></Box>\n                    <Box className=\"modal-content\" backgroundColor={colors.primary[500]}>\n                        <Box m=\"20px\">\n                            <Formik\n                                onSubmit={handleFormSubmit}\n                                initialValues={initialValues}\n                                validationSchema={checkoutSchema}\n                            >\n                                {({\n                                    values,\n                                    errors,\n                                    touched,\n                                    handleBlur,\n                                    handleChange,\n                                    handleSubmit,\n                                }) => (\n                                    <form onSubmit={handleSubmit}>\n                                        <Box >\n\n                                            <Box display={\"flex\"} m={\"1rem 0\"}>\n                                                <Box width={\"35%\"} display={\"flex\"} flexDirection={\"column\"} justifyContent={\"center\"}>\n                                                    <Typography variant=\"h2\" sx={{ mb: \"10px\", fontSize: \"2rem\", fontWeight: \"600\", color: \"white\" }}>\n                                                        {btnTitle}\n                                                    </Typography>\n\n                                                    <Box textAlign=\"center\" display={\"flex\"} >\n                                                        {(() => {\n                                                            if (initialValues.status === \"disable\") {\n                                                                return (\n                                                                    <Typography variant=\"h5\" color={colors.primary[100]} >\n                                                                        {t('disable')}\n                                                                    </Typography>)\n                                                            }\n                                                            if (initialValues.status === \"banned\") {\n                                                                return (\n                                                                    <Typography variant=\"h5\" color={colors.redAccent[500]}>\n                                                                        {t('banned')}\n                                                                    </Typography>)\n                                                            }\n                                                            else {\n                                                                return (\n                                                                    <Typography variant=\"h5\" color={colors.greenAccent[500]}>\n                                                                        {t('normal')}\n                                                                    </Typography>)\n                                                            }\n                                                        })()}\n                                                    </Box>\n                                                </Box>\n\n                                                <Box width={\"65%\"}>\n                                                    {/* UPLOAD COVER COMPONENET */}\n                                                    <CoverUpload handleSuccess={handleUploadCoverSucess} imagePlaceHolder={getImgURL(coverFileName, \"cover\")} type={\"store\"} />\n                                                </Box>\n                                            </Box>\n\n                                            <Box display={\"flex\"} justifyContent={\"space-between\"}>\n                                                <TextField className=\"modal_input_textfield\"\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('store_name')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.name}\n                                                    name=\"name\"\n                                                    error={!!touched.name && !!errors.name}\n                                                    helperText={touched.name && errors.name}\n                                                    sx={{ margin: \"0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                                />\n                                                <TextField className=\"modal_input_textfield\"\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={`${t('intro')} ${t('optional')}`}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.intro}\n                                                    name=\"intro\"\n                                                    error={!!touched.intro && !!errors.intro}\n                                                    helperText={touched.intro && errors.intro}\n                                                    sx={{ margin: \"0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                                />\n                                                { }\n                                                <FormControl sx={{ minWidth: 150 }} >\n                                                    <InputLabel id=\"demo-simple-select-label\" >{initialValues.status}</InputLabel>\n                                                    <Select\n                                                        disabled={initialValues.status === \"banned\"}\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400] }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={status}\n                                                        label=\"status\"\n                                                        onChange={handleStatusChange}\n                                                    >\n                                                        <MenuItem value={\"normal\"}>{t('normal')}</MenuItem>\n                                                        <MenuItem value={\"disable\"}>{t('disable')}</MenuItem>\n                                                    </Select>\n                                                </FormControl>\n                                            </Box>\n\n                                            <Box display={\"flex\"}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    disabled={true}\n                                                    type=\"text\"\n                                                    label={t('brand_id')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.brandId}\n                                                    name=\"brandId\"\n                                                    error={!!touched.brandId && !!errors.brandId}\n                                                    helperText={touched.brandId && errors.brandId}\n                                                    sx={{ marginBottom: \"1rem\", mr: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n\n                                                <TextField\n                                                    fullWidth\n                                                    disabled={true}\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('brand_name')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.brandName}\n                                                    name=\"brandName\"\n                                                    error={!!touched.brandName && !!errors.brandName}\n                                                    helperText={touched.brandName && errors.brandName}\n                                                    sx={{ marginBottom: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                            </Box>\n\n                                            <PlacesAutocomplete\n                                                className=\"places_autocomplete\"\n                                                value={inputAddress}\n                                                onChange={setInputAddress}\n                                                onSelect={handleLocationSelect}\n                                            >\n                                                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                                    <div>\n                                                        <TextField\n                                                            className=\"modal_input_textfield\"\n                                                            fullWidth\n                                                            label={t('search_location')}\n                                                            variant=\"filled\"\n                                                            type=\"text\"\n                                                            sx={{ mb: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                                            {...getInputProps({\n                                                                placeholder: t('search_location'),\n                                                                className: 'location-search-input',\n                                                            })}\n                                                        />\n                                                        <div className=\"autocomplete-dropdown-container\">\n                                                            {loading && <div>Loading...</div>}\n                                                            {suggestions.map(suggestion => {\n                                                                const className = suggestion.active\n                                                                    ? 'suggestion-item--active'\n                                                                    : 'suggestion-item';\n                                                                // inline style for demonstration purpose\n                                                                const style = suggestion.active\n                                                                    ? { backgroundColor: colors.primary[500], color: colors.grey[300], cursor: 'pointer', borderRadius: '5px', fontSize: '1rem', padding: '0.5rem', margin: \"0.5rem\" } //color when hover\n                                                                    : { backgroundColor: colors.primary[400], color: colors.grey[300], cursor: 'pointer', borderRadius: '5px', fontSize: '1rem', padding: '0.5rem', margin: \"0.5rem\" }; //background color\n                                                                return (\n                                                                    <div\n                                                                        {...getSuggestionItemProps(suggestion, {\n                                                                            className,\n                                                                            style,\n                                                                        })}\n                                                                    >\n                                                                        <span>{suggestion.description}</span>\n                                                                    </div>\n                                                                );\n                                                            })}\n                                                        </div>\n                                                    </div>\n                                                )}\n                                            </PlacesAutocomplete>\n\n                                            {/* STORE ADDRESS */}\n                                            <Box display={\"flex\"}>\n                                                <FormControl sx={{ minWidth: 150, height: \"100%\" }}>\n                                                    <InputLabel id=\"demo-simple-select-label\" >{t('county_filter')}</InputLabel>\n                                                    <Select\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\", mr: \"1rem\" }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={cityFilter}\n                                                        label=\"cityFilter\"\n                                                        onChange={handleCityChange}\n                                                        required // add the required prop\n                                                    >\n                                                        {Object.keys(areaData).map((city, i) => (\n                                                            <MenuItem value={city} key={`${city}-${i}`}>\n                                                                {city}\n                                                            </MenuItem>\n                                                        ))}\n                                                    </Select>\n                                                </FormControl>\n\n                                                <FormControl sx={{ minWidth: 150, height: \"100%\" }}>\n                                                    <InputLabel id=\"demo-simple-select-label\" >{t('district_filter')}</InputLabel>\n                                                    <Select\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\", mr: \"1rem\" }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={selectedArea}\n                                                        label=\"areaFilter\"\n                                                        onChange={handleAreaChange}\n                                                        required // add the required prop\n                                                    >\n                                                        {areaFilter.map((area, i) => (\n                                                            <MenuItem value={area} key={area}>\n                                                                {area}\n                                                            </MenuItem>\n                                                        ))}\n                                                    </Select>\n                                                </FormControl>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('address')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={address}\n                                                    name=\"address\"\n                                                    error={!!touched.address && !!errors.address}\n                                                    helperText={touched.address && errors.address}\n                                                    sx={{ marginBottom: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                            </Box>\n\n                                            <Box display={\"flex\"} justifyContent={\"space-between\"} >\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_name')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalName}\n                                                    name=\"principalName\"\n                                                    error={!!touched.principalName && !!errors.principalName}\n                                                    helperText={touched.principalName && errors.principalName}\n                                                    sx={{ marginBottom: \"1rem\", mr: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_line')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalLineUrl}\n                                                    name=\"principalLineUrl\"\n                                                    error={!!touched.principalLineUrl && !!errors.principalLineUrl}\n                                                    helperText={touched.principalLineUrl && errors.principalLineUrl}\n                                                    sx={{ margin: \" 0 0 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                            </Box>\n                                            <Box display={\"flex\"} justifyContent={\"space-between\"} >\n\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_email')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalEmail}\n                                                    name=\"principalEmail\"\n                                                    error={!!touched.principalEmail && !!errors.principalEmail}\n                                                    helperText={touched.principalEmail && errors.principalEmail}\n                                                    sx={{ margin: \" 0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                                {/* PASSWORD INPUT */}\n                                                <FormControl fullWidth variant=\"filled\" sx={{ marginBottom: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }} >\n                                                    <InputLabel htmlFor=\"filled-adornment-password\">{`${t('principal_password')} ${t('optional')}`}</InputLabel>\n                                                    <FilledInput\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        value={values.principalPassword}\n                                                        name=\"principalPassword\"\n                                                        error={!!touched.principalPassword && !!errors.principalPassword}\n                                                        type={showPassword ? 'text' : 'password'}\n                                                        endAdornment={\n                                                            <InputAdornment position=\"end\">\n                                                                <IconButton\n                                                                    aria-label=\"toggle password visibility\"\n                                                                    onClick={handleClickShowPassword}\n                                                                    onMouseDown={handleMouseDownPassword}\n                                                                    edge=\"end\"\n                                                                >\n                                                                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        }\n                                                    />\n                                                    <FormHelperText\n                                                        error={!!touched.principalPassword && !!errors.principalPassword}>\n                                                        {touched.principalPassword && errors.principalPassword}\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </Box>\n\n                                        </Box>\n                                        <Box display=\"flex\" justifyContent=\"center\" >\n                                            <Button onClick={handleDelete} variant=\"contained\" sx={{ minWidth: \"100px\", padding: \".5rem 1.5rem\", margin: \"0 1rem\", borderRadius: \"10px\", border: \"2px solid #ff2f00\" }}>\n                                                <Typography variant=\"h5\" sx={{ textAlign: \"center\", fontSize: \".9rem\", color: \"white\" }}>\n                                                    {deleteTitle}\n                                                </Typography>\n                                            </Button>\n\n\n                                            {entityName === 'company' ? (\n                                                values.status === \"banned\" ? (\n                                                    <Button onClick={handleUnBan} id={values.id} variant=\"contained\" sx={{\n                                                        backgroundColor: colors.primary[400], minWidth: \"100px\", padding: \".5rem 1.5rem\", margin: \"0 1rem\", borderRadius: \"10px\", border: \"2px solid #fff\"\n                                                    }}>\n                                                        <Typography variant=\"h5\" sx={{ textAlign: \"center\", fontSize: \".9rem\", color: \"white\" }}>\n                                                            {unbanTitle}\n                                                        </Typography>\n                                                    </Button>\n                                                ) : (\n                                                    <ConfirmModal props={{ type: \"store\", id: props.id }} />\n                                                )\n                                            ) : null}\n\n\n                                            <Button type=\"submit\" color=\"success\" variant=\"contained\" sx={{ minWidth: \"100px\", padding: \".5rem 1.5rem\", margin: \"0 1rem\", borderRadius: \"10px\", background: colors.grey[100] }}>\n                                                <Typography variant=\"h5\" sx={{ textAlign: \"center\", fontSize: \".9rem\", color: colors.grey[700] }}>\n                                                    {confirmTitle}\n                                                </Typography>\n                                            </Button>\n                                        </Box>\n                                    </form>\n                                )}\n                            </Formik>\n                        </Box >\n                    </Box>\n                </Box>\n            )\n            }\n        </>\n    );\n\n\n\n}\n","import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n    updateMatch();\n    // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  return match;\n}\n\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n\n  // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport { Box, Button, FilledInput, FormControl, FormHelperText, IconButton, InputAdornment, InputLabel, MenuItem, Select, TextField, Typography, useTheme } from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport \"../../components/Modal/modal.css\";\nimport { tokens } from \"../../theme\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { CreateStore } from \"../../graphQL/Queries\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    geocodeByPlaceId,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport { GetBrandList } from \"../../graphQL/Queries\";\nimport { areaData } from \"../../data/cityData\";\nimport CoverUpload from \"../../components/Upload/CoverUpload\";\nimport { getImgURL } from \"../../utils/Utils\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useTranslation } from 'react-i18next';\n\nconst passwordRegex = /^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d_!@#]{6,}$/;\n\nconst checkoutSchema = yup.object().shape({\n    name: yup.string().required(\"required\"),\n\n    principalName: yup.string().required(\"required\"),\n    principalAccount: yup.string().required(\"required\"),\n    principalPassword: yup.string().required(\"required\").matches(passwordRegex),\n    principalLineUrl: yup.string().required(\"required\"),\n    principalEmail: yup.string().email(\"invalid email\"),\n});\n\n\nexport default function CreateStoreModal() {\n    const isNonMobile = useMediaQuery(\"(min-width:600px)\");\n    const { t } = useTranslation();\n\n\n    const theme = useTheme();\n    const colors = tokens(theme.palette.mode);\n\n    // ========================== STATE ==========================\n    const [modal, setModal] = useState(false);\n\n\n    //  ========================== PASSWORD VISIBILITY ==========================\n    const [showPassword, setShowPassword] = useState(false);\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const [{ brandId, brandName }, setBrandInfo] = useState({\n        brandId: \"null\",\n        brandName: \"null\",\n    });\n    var btnTitle = t(\"create_store\"), confirmTitle = t(\"create\"), deleteTitle = t(\"delete\"), banTitle = t(\"remove\"), unbanTitle = t(\"ban\");\n\n\n\n    // ========================== CITY ==========================\n    const [cityFilter, setCityFilter] = useState('');\n    const [areaFilter, setAreaFilter] = useState([]); // list of area based on the city\n    const [selectedArea, setSelectedArea] = useState(''); // selected area\n\n    const handleCityChange = (event) => {\n        setCityFilter(event.target.value);\n        setAreaFilter(areaData[event.target.value]);\n        setSelectedArea('');\n    };\n    const handleAreaChange = (event) => {\n        setSelectedArea(event.target.value);\n    };\n\n    // useEffect(() => {\n    //     console.log(\"city:\" + cityFilter + \", selected area:\" + selectedArea);\n    // }, [cityFilter, areaFilter, selectedArea]);\n\n\n    const [inputAddress, setInputAddress] = useState(\"\"); // FOR DISPLAYING WHAT USER TYPE IN ADDRESS SEARCH BAR\n    const [{ address, coordinates }, setLocation] = useState({\n        address: \"\",\n        coordinates: {\n            lat: 0,\n            lng: 120,\n        }\n    });\n\n    const handleLocationSelect = async value => {\n        const results = await geocodeByAddress(value);\n        const formattedAddress = results[0].address_components[0].long_name + results[0].address_components[1].long_name;\n        const latLng = await getLatLng(results[0]);\n        const city = results[0].address_components[4].long_name;\n        const district = results[0].address_components[3].long_name;\n\n        setInputAddress(value);\n        setLocation({\n            address: formattedAddress,\n            coordinates: latLng\n        });\n\n        if (city in areaData) {\n            setCityFilter(city); // SET THE CITY FILTER TO THE CITY OF THE SELECTED LOCATION\n            // SET THE AREA FILTER TO THE AREA OF THE SELECTED LOCATION\n            setAreaFilter(areaData[city]);\n            setSelectedArea(district); // SET THE SELECTED AREA TO THE AREA OF THE SELECTED LOCATION\n        }\n\n\n        console.log(\"city\" + city + \"district\" + district + \"Coordinate:\" + coordinates.lat + \",\" + coordinates.lng);\n        //this.props.onAddressSelected();\n    };\n\n    const initialValues = {\n        name: \"\",\n        intro: \"\",\n\n        //locations get from location state\n        principalName: \"\",\n        principalAccount: \"\",\n        principalPassword: \"\",\n        principalLineUrl: \"https://lin.ee/\",\n        principalEmail: \"\",\n    };\n\n    // =================== BRAND LIST ===================\n    const { loading: loading1, error: error1, data: data1 } = useQuery(GetBrandList);\n    const [brandListFilter, setBrandListFilter] = useState('');\n    const [brandList, setBrandList] = useState([]);\n    useEffect(() => {\n        if (data1) {\n            setBrandList(data1.managerGetBrands);\n        }\n\n    }, [data1]);\n    const handleBrandListChange = (e) => {\n        const targetId = e.target.value;\n\n        //find the brand id from brand list\n        const brand = brandList.find(brand => brand.id === targetId);\n\n        if (brand) {\n            setBrandListFilter(targetId);\n            setBrandInfo({\n                brandId: targetId,\n                brandName: brand.name\n            });\n        }\n    };\n\n    //============================================ GQL ==================================================\n    //create store\n    const [ApolloCreateStore, { loading, error, data }] = useLazyQuery(CreateStore);\n    useEffect(() => {\n        if (data) {\n            window.location.reload();\n        }\n    }, [data]);\n\n\n    const [coverFileName, setCoverFileName] = useState('');\n    const handleUploadCoverSucess = (name) => {\n        setCoverFileName(name);\n    };\n\n    const handleFormSubmit = (values) => {\n        const variables = {\n            args: [\n                {\n                    id: brandId\n                }\n            ],\n            brandId: brandId,\n            name: values.name,\n            cover: coverFileName,\n            location: {\n                city: cityFilter,\n                district: selectedArea,\n                address: address,\n                coordinate: {\n                    latitude: coordinates.lat,\n                    longitude: coordinates.lng\n                },\n                // description: \"location description\"\n            },\n            principal: {\n                name: values.principalName,\n                account: values.principalAccount,\n                password: values.principalPassword,\n                lineUrl: values.principalLineUrl,\n            }\n        }\n        if (values.intro !== \"\") {\n            variables.intro = values.intro;\n        }\n        if (values.principalEmail !== \"\") {\n            variables.principal.email = values.principalEmail;\n        }\n\n        console.log(variables);\n        ApolloCreateStore({ variables });\n    };\n\n    const toggleModal = () => {\n        setModal(!modal);\n    };\n\n    if (modal) {\n        document.body.classList.add('active-modal')\n    } else {\n        document.body.classList.remove('active-modal')\n    }\n    return (\n        <>\n            {/* THE CONTENT OF THE BUTTON */}\n\n            <Button onClick={toggleModal} className=\"btn-modal\" sx={{ color: colors.primary[100], border: \"1px solid #111\", borderColor: colors.blueAccent[100] }}>{btnTitle}</Button>\n\n            {/* CONTENT OF WHAT HAPPEN AFTER BUTTON CLICKED */}\n            {modal && (\n                <Box className=\"modal\">\n                    <Box onClick={toggleModal} className=\"overlay\"></Box>\n                    <Box className=\"modal-content\" backgroundColor={colors.primary[500]}>\n                        <Box m=\"20px\">\n                            <Formik\n                                onSubmit={handleFormSubmit}\n                                initialValues={initialValues}\n                                validationSchema={checkoutSchema}\n                            >\n                                {({\n                                    values,\n                                    errors,\n                                    touched,\n                                    handleBlur,\n                                    handleChange,\n                                    handleSubmit,\n                                }) => (\n                                    <form onSubmit={handleSubmit}>\n                                        <Box>\n                                            <Box display={\"flex\"} m={\"1rem 0\"}>\n                                                <Box width={\"35%\"} display={\"flex\"} flexDirection={\"column\"} justifyContent={\"center\"}>\n                                                    <Typography variant=\"h2\" sx={{ textAlign: \"left\", fontSize: \"2rem\", fontWeight: \"600\", color: \"white\" }}>\n                                                        {btnTitle}\n                                                    </Typography>\n                                                </Box>\n                                                <Box width={\"65%\"}>\n                                                    {/* UPLOAD COVER COMPONENET */}\n                                                    <CoverUpload handleSuccess={handleUploadCoverSucess} imagePlaceHolder={getImgURL(coverFileName, \"cover\")} type={\"store\"} />\n                                                </Box>\n                                            </Box>\n\n\n                                            {/* Brand info */}\n                                            <Box display={\"flex\"}>\n                                                <TextField\n                                                    fullWidth\n                                                    disabled={true}\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('brand_id')}\n                                                    required // add the required prop\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={brandId}\n                                                    name=\"brandId\"\n                                                    error={!!touched.brandId && !!errors.brandId}\n                                                    helperText={touched.brandId && errors.brandId}\n                                                    sx={{ marginBottom: \"1rem\", mr: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                                <TextField\n                                                    fullWidth\n                                                    disabled={true}\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('brand_name')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={brandName}\n                                                    name=\"brandName\"\n                                                    required // add the required prop\n                                                    error={!!touched.brandName && !!errors.brandName}\n                                                    helperText={touched.brandName && errors.brandName}\n                                                    sx={{ marginBottom: \"1rem\", mr: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                                <FormControl sx={{ minWidth: 150, height: \"100%\" }}>\n                                                    <InputLabel id=\"demo-simple-select-label\" >{t('brand_filter')}</InputLabel>\n                                                    <Select\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\" }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={brandListFilter}\n                                                        label=\"brandListFilter\"\n                                                        onChange={handleBrandListChange}\n                                                        required\n                                                    >\n                                                        {brandList.map((brand, i) => (\n                                                            <MenuItem\n                                                                value={brand.id}\n                                                                key={`${i}`}\n                                                            >\n                                                                {brand.id} - {brand.name}\n                                                            </MenuItem>\n                                                        ))}\n                                                    </Select>\n                                                </FormControl>\n                                            </Box>\n\n                                            <Box display={\"flex\"} >\n                                                <TextField className=\"modal_input_textfield\"\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('name')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.name}\n                                                    name=\"name\"\n                                                    required // add the required prop\n                                                    error={!!touched.name && !!errors.name}\n                                                    helperText={touched.name && errors.name}\n                                                    sx={{ margin: \"0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                                />\n                                                <TextField className=\"modal_input_textfield\"\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={`${t('intro')} ${t('optional')} `}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.intro}\n                                                    name=\"intro\"\n                                                    error={!!touched.intro && !!errors.intro}\n                                                    helperText={touched.intro && errors.intro}\n                                                    sx={{ margin: \"0 0 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                                />\n                                            </Box>\n\n                                            {/* Search Store location */}\n                                            <PlacesAutocomplete\n                                                className=\"places_autocomplete\"\n                                                value={inputAddress}\n                                                onChange={setInputAddress}\n                                                onSelect={handleLocationSelect}\n                                            >\n                                                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                                    <div>\n                                                        <TextField\n                                                            className=\"modal_input_textfield\"\n                                                            fullWidth\n                                                            label={t('search_location')}\n                                                            variant=\"filled\"\n                                                            type=\"text\"\n                                                            sx={{ margin: \"1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                                            {...getInputProps({\n                                                                placeholder: t('search_location'),\n                                                                className: 'location-search-input',\n                                                            })}\n                                                        />\n                                                        <div className=\"autocomplete-dropdown-container\">\n                                                            {loading && <div>Loading...</div>}\n                                                            {suggestions.map((suggestion, index) => {\n                                                                const className = suggestion.active\n                                                                    ? 'suggestion-item--active'\n                                                                    : 'suggestion-item';\n                                                                // inline style for demonstration purpose\n                                                                const style = suggestion.active\n                                                                    ? { backgroundColor: colors.primary[500], color: colors.grey[300], cursor: 'pointer', borderRadius: '5px', fontSize: '1rem', padding: '0.5rem', margin: \"0.5rem\" } //color when hover\n                                                                    : { backgroundColor: colors.primary[400], color: colors.grey[300], cursor: 'pointer', borderRadius: '5px', fontSize: '1rem', padding: '0.5rem', margin: \"0.5rem\" }; //background color\n                                                                return (\n                                                                    <div\n                                                                        key={index} // add a unique key prop\n                                                                        {...getSuggestionItemProps(suggestion, {\n                                                                            className,\n                                                                            style,\n                                                                        })}\n                                                                    >\n                                                                        <span>{suggestion.description}</span>\n                                                                    </div>\n                                                                );\n                                                            })}\n                                                        </div>\n                                                    </div>\n                                                )}\n                                            </PlacesAutocomplete>\n\n\n\n                                            {/* STORE ADDRESS */}\n                                            <Box display={\"flex\"}>\n                                                {/* CITYFILTER */}\n                                                <FormControl required  sx={{ minWidth: 150, height: \"100%\" }}>\n                                                    <InputLabel id=\"demo-simple-select-label\" >{t('county_filter')}</InputLabel>\n                                                    <Select\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\", mr: \"1rem\" }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={cityFilter}\n                                                        label=\"cityFilter\"\n                                                        onChange={handleCityChange}\n                                                        required // add the required prop\n                                                    >\n                                                        {Object.keys(areaData).map((city, i) => (\n                                                            <MenuItem value={city} key={`${city}-${i}`}>\n                                                                {city}\n                                                            </MenuItem>\n                                                        ))}\n                                                    </Select>\n                                                </FormControl>\n\n                                                <FormControl required sx={{ minWidth: 150, height: \"100%\" }}>\n                                                    <InputLabel id=\"demo-simple-select-label\" >{t('district_filter')}</InputLabel>\n                                                    <Select\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\", mr: \"1rem\" }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={selectedArea}\n                                                        label=\"areaFilter\"\n                                                        onChange={handleAreaChange}\n                                                        required // add the required prop\n                                                    >\n                                                        {areaFilter.map((area, i) => (\n                                                            <MenuItem value={area} key={area}>\n                                                                {area}\n                                                            </MenuItem>\n                                                        ))}\n                                                    </Select>\n                                                </FormControl>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('address')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={address}\n                                                    name=\"address\"\n                                                    required // add the required prop\n                                                    error={!!touched.address && !!errors.address}\n                                                    helperText={touched.address && errors.address}\n                                                    sx={{ marginBottom: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                            </Box>\n\n                                            <Box display={\"flex\"}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_name')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalName}\n                                                    name=\"principalName\"\n                                                    required\n                                                    error={!!touched.principalName && !!errors.principalName}\n                                                    helperText={touched.principalName && errors.principalName}\n                                                    sx={{ margin: \" 0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_account')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalAccount}\n                                                    name=\"principalAccount\"\n                                                    required\n                                                    error={!!touched.principalAccount && !!errors.principalAccount}\n                                                    helperText={touched.principalAccount && errors.principalAccount}\n                                                    sx={{ margin: \" 0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n\n                                                {/* PASSWORD INPUT */}\n                                                <FormControl \n                                                fullWidth variant=\"filled\"                             \n                                                required // add the required prop\n                                                sx={{ marginBottom: \"1rem\", \n                                                backgroundColor: colors.primary[400], borderRadius: \"5px\" }} >\n                                                    <InputLabel htmlFor=\"filled-adornment-password\">{t('principal_password')}</InputLabel>\n                                                    <FilledInput\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        value={values.principalPassword}\n                                                        name=\"principalPassword\"\n                                                        error={!!touched.principalPassword && !!errors.principalPassword}\n                                                        type={showPassword ? 'text' : 'password'}\n                                                        endAdornment={\n                                                            <InputAdornment position=\"end\">\n                                                                <IconButton\n                                                                    aria-label=\"toggle password visibility\"\n                                                                    onClick={handleClickShowPassword}\n                                                                    onMouseDown={handleMouseDownPassword}\n                                                                    edge=\"end\"\n                                                                >\n                                                                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        }\n                                                    />\n                                                    <FormHelperText error={!!touched.principalPassword && !!errors.principalPassword}>\n                                                        {touched.principalPassword && errors.principalPassword}\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </Box>\n\n                                            <Box display={\"flex\"}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={`${t('principal_email')} ${t('optional')}`}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalEmail}\n                                                    name=\"principalEmail\"\n                                                    error={!!touched.principalEmail && !!errors.principalEmail}\n                                                    helperText={touched.principalEmail && errors.principalEmail}\n                                                    sx={{ margin: \" 0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_line')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalLineUrl}\n                                                    name=\"principalLineUrl\"\n                                                    required\n                                                    error={!!touched.principalLineUrl && !!errors.principalLineUrl}\n                                                    helperText={touched.principalLineUrl && errors.principalLineUrl}\n                                                    sx={{ margin: \" 0 0 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                            </Box>\n                                        </Box>\n                                        <Box display=\"flex\" justifyContent=\"center\" >\n                                            <Box display=\"flex\" justifyContent=\"center\" >\n                                                <button className=\"my-button\" type=\"submit\">{confirmTitle}</button>\n                                            </Box>\n                                        </Box>\n                                    </form>\n                                )}\n                            </Formik>\n                        </Box >\n                    </Box>\n                </Box>\n            )\n            }\n        </>\n\n    );\n\n\n\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Box, Button, FilledInput, FormControl, FormHelperText, IconButton, InputAdornment, InputLabel, MenuItem, Select, TextField, Typography, useTheme } from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport \"../../components/Modal/modal.css\";\nimport { tokens } from \"../../theme\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { CreateStore } from \"../../graphQL/Queries\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    geocodeByPlaceId,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport { GetBrandList } from \"../../graphQL/Queries\";\nimport { areaData } from \"../../data/cityData\";\nimport CoverUpload from \"../../components/Upload/CoverUpload\";\nimport { getImgURL } from \"../../utils/Utils\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { BRAND_CreateStore } from \"src/graphQL/BrandPrincipalQueries\";\nimport { useTranslation } from 'react-i18next';\n\nconst passwordRegex = /^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d_!@#]{6,}$/;\n\nconst checkoutSchema = yup.object().shape({\n    name: yup.string().required(\"required\"),\n\n    principalName: yup.string().required(\"required\"),\n    principalAccount: yup.string().required(\"required\"),\n    principalPassword: yup.string().required(\"required\").matches(passwordRegex),\n    principalLineUrl: yup.string().required(\"required\"),\n    principalEmail: yup.string().email(\"invalid email\"),\n});\n\n\nexport default function CreateStoreModal_B() {\n    const isNonMobile = useMediaQuery(\"(min-width:600px)\");\n    const { t } = useTranslation();\n\n    const theme = useTheme();\n    const colors = tokens(theme.palette.mode);\n\n    // ========================== STATE ==========================\n    const [modal, setModal] = useState(false);\n\n\n    //  ========================== PASSWORD VISIBILITY ==========================\n    const [showPassword, setShowPassword] = useState(false);\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const [{ brandId, brandName }, setBrandInfo] = useState({\n        brandId: \"null\",\n        brandName: \"null\",\n    });\n\n    var btnTitle = t(\"create_store\"), confirmTitle = t(\"create\"), deleteTitle = t(\"delete\"), banTitle = t(\"remove\"), unbanTitle = t(\"ban\");\n\n\n    // ========================== CITY ==========================\n    const [cityFilter, setCityFilter] = useState('');\n    const [areaFilter, setAreaFilter] = useState([]); // list of area based on the city\n    const [selectedArea, setSelectedArea] = useState(''); // selected area\n\n    const handleCityChange = (event) => {\n        setCityFilter(event.target.value);\n        setAreaFilter(areaData[event.target.value]);\n        setSelectedArea('');\n    };\n    const handleAreaChange = (event) => {\n        setSelectedArea(event.target.value);\n    };\n\n    // useEffect(() => {\n    //     console.log(\"city:\" + cityFilter + \", selected area:\" + selectedArea);\n    // }, [cityFilter, areaFilter, selectedArea]);\n\n\n    const [inputAddress, setInputAddress] = useState(\"\"); // FOR DISPLAYING WHAT USER TYPE IN ADDRESS SEARCH BAR\n    const [{ address, coordinates }, setLocation] = useState({\n        address: \"\",\n        coordinates: {\n            lat: 0,\n            lng: 120,\n        }\n    });\n\n    const handleLocationSelect = async value => {\n        const results = await geocodeByAddress(value);\n        const formattedAddress = results[0].address_components[0].long_name + results[0].address_components[1].long_name;\n        const latLng = await getLatLng(results[0]);\n        const city = results[0].address_components[4].long_name;\n        const district = results[0].address_components[3].long_name;\n\n        setInputAddress(value);\n        setLocation({\n            address: formattedAddress,\n            coordinates: latLng\n        });\n\n        if (city in areaData) {\n            setCityFilter(city); // SET THE CITY FILTER TO THE CITY OF THE SELECTED LOCATION\n            // SET THE AREA FILTER TO THE AREA OF THE SELECTED LOCATION\n            setAreaFilter(areaData[city]);\n            setSelectedArea(district); // SET THE SELECTED AREA TO THE AREA OF THE SELECTED LOCATION\n        }\n\n        console.log(\"city\" + city + \"district\" + district + \"Coordinate:\" + coordinates.lat + \",\" + coordinates.lng);\n        //this.props.onAddressSelected();\n    };\n\n    const initialValues = {\n        name: \"\",\n        intro: \"\",\n\n        //locations get from location state\n        principalName: \"\",\n        principalAccount: \"\",\n        principalPassword: \"\",\n        principalLineUrl: \"https://lin.ee/\",\n        principalEmail: \"\",\n    };\n\n    // =================== BRAND LIST ===================\n\n    //============================================ GQL ==================================================\n    //create store\n    const [ApolloCreateStore, { loading, error, data }] = useLazyQuery(BRAND_CreateStore);\n    useEffect(() => {\n        if (data) {\n            window.location.reload();\n        }\n    }, [data]);\n\n\n    const [coverFileName, setCoverFileName] = useState(\"\");\n    const handleUploadCoverSucess = (name) => {\n        setCoverFileName(name);\n    };\n\n    const handleFormSubmit = (values) => {\n        const variables = {\n            args: [\n                {\n                    id: brandId\n                }\n            ],\n            brandId: brandId,\n            name: values.name,\n            cover: coverFileName,\n            location: {\n                city: cityFilter,\n                district: selectedArea,\n                address: address,\n                coordinate: {\n                    latitude: coordinates.lat,\n                    longitude: coordinates.lng\n                },\n                // description: \"location description\"\n            },\n            principal: {\n                name: values.principalName,\n                account: values.principalAccount,\n                password: values.principalPassword,\n                lineUrl: values.principalLineUrl,\n            }\n        }\n        if (values.intro !== \"\") {\n            variables.intro = values.intro;\n        }\n        if (values.principalEmail !== \"\") {\n            variables.principal.email = values.principalEmail;\n        }\n\n        console.log(variables);\n        ApolloCreateStore({ variables });\n    };\n\n    const toggleModal = () => {\n        setModal(!modal);\n    };\n\n    if (modal) {\n        document.body.classList.add('active-modal')\n    } else {\n        document.body.classList.remove('active-modal')\n    }\n    return (\n        <>\n            {/* THE CONTENT OF THE BUTTON */}\n\n            <Button onClick={toggleModal} className=\"btn-modal\" sx={{ color: colors.primary[100], border: \"1px solid #111\", borderColor: colors.blueAccent[100] }}>{btnTitle}</Button>\n\n            {/* CONTENT OF WHAT HAPPEN AFTER BUTTON CLICKED */}\n            {modal && (\n                <Box className=\"modal\">\n                    <Box onClick={toggleModal} className=\"overlay\"></Box>\n                    <Box className=\"modal-content\" backgroundColor={colors.primary[500]}>\n                        <Box m=\"20px\">\n\n\n                            <Formik\n                                onSubmit={handleFormSubmit}\n                                initialValues={initialValues}\n                                validationSchema={checkoutSchema}\n                            >\n                                {({\n                                    values,\n                                    errors,\n                                    touched,\n                                    handleBlur,\n                                    handleChange,\n                                    handleSubmit,\n                                }) => (\n                                    <form onSubmit={handleSubmit}>\n                                        <Box>\n                                            <Box display={\"flex\"} m={\"1rem 0\"}>\n                                                <Box width={\"35%\"} display={\"flex\"} flexDirection={\"column\"} justifyContent={\"center\"}>\n                                                    <Typography variant=\"h2\" sx={{ textAlign: \"left\", fontSize: \"2rem\", fontWeight: \"600\", color: \"white\" }}>\n                                                        {btnTitle}\n                                                    </Typography>\n                                                </Box>\n                                                <Box width={\"65%\"}>\n                                                    {/* UPLOAD COVER COMPONENET */}\n                                                    <CoverUpload handleSuccess={handleUploadCoverSucess} imagePlaceHolder={getImgURL(coverFileName, \"cover\")} type={\"store\"} />\n                                                </Box>\n                                            </Box>\n\n\n\n\n\n                                            <TextField className=\"modal_input_textfield\"\n                                                fullWidth\n                                                variant=\"filled\"\n                                                type=\"text\"\n                                                label={t('store_name')}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                value={values.name}\n                                                name=\"name\"\n                                                required\n                                                error={!!touched.name && !!errors.name}\n                                                helperText={touched.name && errors.name}\n                                                sx={{ margin: \"0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                            />\n                                            <TextField className=\"modal_input_textfield\"\n                                                fullWidth\n                                                variant=\"filled\"\n                                                type=\"text\"\n                                                label={`${t('intro')} ${t('optional')} `}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                value={values.intro}\n                                                name=\"intro\"\n                                                error={!!touched.intro && !!errors.intro}\n                                                helperText={touched.intro && errors.intro}\n                                                sx={{ margin: \"0 1rem 0rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                            />\n\n                                            {/* Search Store location */}\n                                            <PlacesAutocomplete\n                                                className=\"places_autocomplete\"\n                                                value={inputAddress}\n                                                onChange={setInputAddress}\n                                                onSelect={handleLocationSelect}\n                                            >\n                                                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                                                    <div>\n                                                        <TextField\n                                                            className=\"modal_input_textfield\"\n                                                            fullWidth\n                                                            label={t('search_location')}\n                                                            variant=\"filled\"\n                                                            type=\"text\"\n                                                            sx={{ margin: \"1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\", color: \"black\" }}\n                                                            {...getInputProps({\n                                                                placeholder: t('search_location'),\n                                                                className: 'location-search-input',\n                                                            })}\n                                                        />\n                                                        <div className=\"autocomplete-dropdown-container\">\n                                                            {loading && <div>Loading...</div>}\n                                                            {suggestions.map((suggestion, index) => {\n                                                                const className = suggestion.active\n                                                                    ? 'suggestion-item--active'\n                                                                    : 'suggestion-item';\n                                                                // inline style for demonstration purpose\n                                                                const style = suggestion.active\n                                                                    ? { backgroundColor: colors.primary[500], color: colors.grey[300], cursor: 'pointer', borderRadius: '5px', fontSize: '1rem', padding: '0.5rem', margin: \"0.5rem\" } //color when hover\n                                                                    : { backgroundColor: colors.primary[400], color: colors.grey[300], cursor: 'pointer', borderRadius: '5px', fontSize: '1rem', padding: '0.5rem', margin: \"0.5rem\" }; //background color\n                                                                return (\n                                                                    <div\n                                                                        key={index} // add a unique key prop\n                                                                        {...getSuggestionItemProps(suggestion, {\n                                                                            className,\n                                                                            style,\n                                                                        })}\n                                                                    >\n                                                                        <span>{suggestion.description}</span>\n                                                                    </div>\n                                                                );\n                                                            })}\n                                                        </div>\n                                                    </div>\n                                                )}\n                                            </PlacesAutocomplete>\n\n\n\n                                            {/* STORE ADDRESS */}\n                                            <Box display={\"flex\"}>\n                                                {/* CITYFILTER */}\n                                                <FormControl required sx={{ minWidth: 150, height: \"100%\" }}>\n                                                    <InputLabel id=\"demo-simple-select-label\" >{t('county_filter')}</InputLabel>\n                                                    <Select\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\", mr: \"1rem\" }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={cityFilter}\n                                                        label=\"cityFilter\"\n                                                        onChange={handleCityChange}\n                                                        required // add the required prop\n                                                    >\n                                                        {Object.keys(areaData).map((city, i) => (\n                                                            <MenuItem value={city} key={`${city}-${i}`}>\n                                                                {city}\n                                                            </MenuItem>\n                                                        ))}\n                                                    </Select>\n                                                </FormControl>\n\n                                                <FormControl required sx={{ minWidth: 150, height: \"100%\" }}>\n                                                    <InputLabel id=\"demo-simple-select-label\" >{t('district_filter')}</InputLabel>\n                                                    <Select\n                                                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\", mr: \"1rem\" }}\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={selectedArea}\n                                                        label=\"areaFilter\"\n                                                        onChange={handleAreaChange}\n                                                        required // add the required prop\n                                                    >\n                                                        {areaFilter.map((area, i) => (\n                                                            <MenuItem value={area} key={area}>\n                                                                {area}\n                                                            </MenuItem>\n                                                        ))}\n                                                    </Select>\n                                                </FormControl>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('address')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={address}\n                                                    name=\"address\"\n                                                    required // add the required prop\n                                                    error={!!touched.address && !!errors.address}\n                                                    helperText={touched.address && errors.address}\n                                                    sx={{ marginBottom: \"1rem\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                            </Box>\n\n                                            <Box display={\"flex\"}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_name')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalName}\n                                                    name=\"principalName\"\n                                                    required\n                                                    error={!!touched.principalName && !!errors.principalName}\n                                                    helperText={touched.principalName && errors.principalName}\n                                                    sx={{ margin: \" 0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_account')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalAccount}\n                                                    name=\"principalAccount\"\n                                                    required\n                                                    error={!!touched.principalAccount && !!errors.principalAccount}\n                                                    helperText={touched.principalAccount && errors.principalAccount}\n                                                    sx={{ margin: \" 0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n\n                                                {/* PASSWORD INPUT */}\n                                                <FormControl \n                                                fullWidth variant=\"filled\"                             \n                                                required // add the required prop\n                                                sx={{ marginBottom: \"1rem\", \n                                                backgroundColor: colors.primary[400], borderRadius: \"5px\" }} >\n                                                    <InputLabel htmlFor=\"filled-adornment-password\">{`${t('principal_password')}`}</InputLabel>\n                                                    <FilledInput\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        value={values.principalPassword}\n                                                        name=\"principalPassword\"\n                                                        error={!!touched.principalPassword && !!errors.principalPassword}\n                                                        type={showPassword ? 'text' : 'password'}\n                                                        endAdornment={\n                                                            <InputAdornment position=\"end\">\n                                                                <IconButton\n                                                                    aria-label=\"toggle password visibility\"\n                                                                    onClick={handleClickShowPassword}\n                                                                    onMouseDown={handleMouseDownPassword}\n                                                                    edge=\"end\"\n                                                                >\n                                                                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        }\n                                                    />\n                                                    <FormHelperText error={!!touched.principalPassword && !!errors.principalPassword}>\n                                                        {touched.principalPassword && errors.principalPassword}\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </Box>\n\n                                            <Box display={\"flex\"}>\n\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={`${t('principal_email')} ${t('optional')}`}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalEmail}\n                                                    name=\"principalEmail\"\n                                                    error={!!touched.principalEmail && !!errors.principalEmail}\n                                                    helperText={touched.principalEmail && errors.principalEmail}\n                                                    sx={{ margin: \" 0 1rem 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"filled\"\n                                                    type=\"text\"\n                                                    label={t('principal_line')}\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.principalLineUrl}\n                                                    name=\"principalLineUrl\"\n                                                    required\n                                                    error={!!touched.principalLineUrl && !!errors.principalLineUrl}\n                                                    helperText={touched.principalLineUrl && errors.principalLineUrl}\n                                                    sx={{ margin: \" 0 0 1rem 0\", backgroundColor: colors.primary[400], borderRadius: \"5px\" }}\n                                                />\n                                            </Box>\n                                        </Box>\n                                        <Box display=\"flex\" justifyContent=\"center\" >\n                                            <Box display=\"flex\" justifyContent=\"center\" >\n                                                <button className=\"my-button\" type=\"submit\">{confirmTitle}</button>\n                                            </Box>\n                                        </Box>\n                                    </form>\n                                )}\n                            </Formik>\n                        </Box >\n                    </Box>\n                </Box>\n            )\n            }\n        </>\n\n    );\n\n\n\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport { Link } from 'react-router-dom';\n\n// QUERIES\nimport { useQuery } from '@apollo/client'\nimport { GetAllStores } from '../../graphQL/Queries'\n\n// THEME\nimport { Box, Button, FormControl, InputLabel, MenuItem, Select, Typography, useTheme } from \"@mui/material\";\nimport { tokens } from \"../../theme\";\n\n// ICONS\nimport InputBase from \"@mui/material/InputBase\";\nimport SearchIcon from \"@mui/icons-material/Search\";\n\n// COMPONENETS\nimport { citiesData } from \"../../data/mockData\";\nimport StoreListModal from './StoreListModal';\nimport CreateStoreModal from './CreateStoreModal'\nimport Pagination from '../../components/Pagination';\nimport Refresh from '../../components/Refresh';\nimport Loader from '../../components/loader/Loader';\nimport Error from '../../components/error/Error';\n\nimport { useSelector } from \"react-redux\";\nimport { BRAND_GetAllStores } from 'src/graphQL/BrandPrincipalQueries';\nimport CreateStoreModal_B from './CreateStoreModal_B';\nimport { STORE_GetAllStores } from 'src/graphQL/StorePrincipalQueries';\nimport { useTranslation } from 'react-i18next';\n// const { t } = useTranslation();\n\n\n\nconst StoreManagement = () => {\n    const { entityName } = useSelector((state) => state.entity);\n    const { t } = useTranslation();\n\n\n    //THEME\n    const theme = useTheme();\n    const colors = tokens(theme.palette.mode);\n\n    // STATES\n    const [searchFilter, setSearchFilter] = useState('');\n    const [cityFilter, setCityFilter] = useState('');\n    const handleCityChange = (e) => {\n        setCityFilter(e.target.value);\n    };\n\n\n    //REF\n    const brandRef = useRef('');\n    const searchRef = useRef('');\n\n    // PAGINATION\n    const [limit, setLimit] = useState(10);\n    const [offset, setOffset] = useState(0);\n    const handlePageChange = ({ limit, offset }) => {\n        setLimit(limit);\n        setOffset(offset);\n    }\n\n    //FUNCTIONS\n    const handleSearchChange = (e) => {\n        setSearchFilter(e.target.value);\n    };\n\n\n    const submitSearch = () => {\n        console.log(brandRef.current.value + \" \" + searchRef.current.value + searchFilter + cityFilter);\n        //CALL SEARCH FUNCTION\n        let brandValue = brandRef.current.value;\n        let storeValue = searchRef.current.value;\n        if (brandValue.length > 2 && storeValue.length === 0) {\n            let search = brandArraySearch(stores, brandValue);\n            setStores(search)\n        }\n        else if (brandValue.length === 0 && storeValue.length > 2) {\n            let search = storeArraySearch(stores, storeValue);\n            setStores(search)\n        }\n        else { //IF SEARCH VALUE IS LESS THAN 3 CHARACTERS, RESET BRANDS TO INIT BRANDS\n            setStores(initStores)\n        }\n    }\n\n    //BRAND SEARCH FUNCTION\n    const brandArraySearch = (array, keyword) => {\n        const searchTerm = keyword\n\n        return array.filter(value => {\n            return value.brand.name.match(new RegExp(searchTerm, 'g'))\n        })\n    }\n\n    // STORE SEARCH FUNCTION\n    const storeArraySearch = (array, keyword) => {\n        console.log(array, keyword);\n        console.log()\n        const searchTerm = keyword\n\n        return array.filter(value => {\n            return value.name.match(new RegExp(searchTerm, 'g'))\n        })\n    }\n\n    //========================== GRAPHQL ==========================\n    let STORE_INIT_QUERY;\n    switch (entityName) {\n        case 'company':\n            STORE_INIT_QUERY = GetAllStores;\n            break;\n        case 'brand':\n            STORE_INIT_QUERY = BRAND_GetAllStores;\n            break;\n        case 'store':\n            STORE_INIT_QUERY = STORE_GetAllStores;\n            break;\n        default:\n            break;\n    }\n\n\n    const { loading, error, data } = useQuery(STORE_INIT_QUERY, {\n        variables: { limit, offset }\n    });\n    const [initStores, SetInitStores] = useState([]);\n    const [stores, setStores] = useState([]);\n\n    useEffect(() => {\n        if (data) {\n            switch (entityName) {\n                case 'company':\n                    setStores(data.managerGetStores);\n                    SetInitStores(data.managerGetStores);\n                    break;\n                case 'brand':\n                    setStores(data.getBrandPrincipal.brands[0].managerGetStores);\n                    SetInitStores(data.getBrandPrincipal.brands[0].managerGetStores);\n                    break;\n                case 'store':\n                    setStores(data.getStorePrincipal.stores);\n                    SetInitStores(data.getStorePrincipal.stores);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }, [data, offset]);\n\n\n    useEffect(() => {\n        if (data) {\n\n        }\n    }, [data]);\n\n    if (loading) return <Loader />;\n    if (error) return <Error />;\n\n    return (\n        <Box p={2} position=\"flex\" flexDirection={\"column\"}>\n            <Box height={\"10%\"}>\n                <h1 className='userManagement_title'>{t('store_management')}</h1>\n            </Box>\n\n            {/* SEARCH DIV */}\n            <Box className='flex_media' marginBottom={\"2rem\"} height={\"10%\"} alignItems={\"center\"}>\n                {/* name Search */}\n                <Box\n                    display=\"flex\"\n                    backgroundColor={colors.primary[400]}\n                    borderRadius=\"10px\"\n                    height={\"52px\"}\n                    maxWidth={140}>\n                    <InputBase sx={{ textTransform: \"capitalize\", ml: 2, pr: 2 }} placeholder={`${t('brand_management')} ${t('or')} ${t('store_management')}`} inputRef={brandRef} />\n                </Box>\n                <FormControl sx={{ width: 120 }}>\n                    <InputLabel id=\"demo-simple-select-label\" >\n                        {t('county_filter')}\n                    </InputLabel>\n                    <Select\n                        sx={{ borderRadius: \"10px\", background: colors.primary[400], height: \"100%\", width: \"auto\" }}\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={cityFilter}\n                        label=\"cityFilter\"\n                        onChange={handleCityChange}\n                    >\n                        {citiesData.map((city, i) => (\n                            <MenuItem\n                                value={city.name}\n                                key={`${city.id}-${i}`}\n                            >\n                                {city.name}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                {/* SEARCH BTN */}\n                <Button sx={{\n                    backgroundColor: colors.primary[300],\n                    color: colors.grey[100],\n                    minWidth: \"120px\",\n                    height: \"52px\",\n                    borderRadius: \"10px\",\n                    ':hover': {\n                        bgcolor: colors.primary[300],\n                        border: '1px solid white',\n                    }\n                }}\n                    onClick={submitSearch}>\n                    <SearchIcon sx={{ mr: \"10px\", fontsize: \".8rem\", color: \"white\" }} />\n                    <Typography color={\"white\"} variant=\"h5\" fontWeight=\"500\">\n                        {t('search')}\n                    </Typography>\n                </Button>\n\n                <Box\n                    display=\"flex\"\n                    backgroundColor={colors.primary[400]}\n                    borderRadius=\"10px\"\n                    marginLeft={\"auto\"}\n                    padding={\"0\"}\n                    height={\"52px\"}\n                >\n                    {entityName === 'company' ? <CreateStoreModal /> :\n                        entityName === 'brand' ? <CreateStoreModal_B /> : null\n                    }\n                </Box>\n\n            </Box>\n\n\n            {/* TABLE DIV */}\n            <Box\n                backgroundColor={colors.primary[400]}\n                borderRadius=\"10px\"\n                height={\"50%\"}\n            >\n                {/* PAGINATION & REFRESH DIV */}\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    borderBottom={`0px solid ${colors.primary[500]}`}\n                    colors={colors.grey[100]}\n                    p=\"15px\"\n                >\n                    <Box width={\"90%\"}>\n                        {/* pagination */}\n                        <Pagination\n                            limit={limit}\n                            offset={offset}\n                            onPageChange={handlePageChange}\n                        />\n                    </Box>\n\n                    <Box width={\"10%\"}>\n                        {/* refresh button */}\n                        <Refresh\n                            limit={limit}\n                            offset={offset}\n                            onPageChange={handlePageChange} />\n                    </Box>\n                </Box>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                    borderBottom={`4px solid ${colors.primary[500]}`}\n                    colors={colors.grey[100]}\n                    p=\"10px\"\n                >\n\n                    <Box width={\"15%\"} display=\"flex\" alignItems={\"center\"} justifyContent={\"center\"}>\n                        <Typography color={colors.grey[100]} variant=\"h5\" fontWeight=\"500\">{t('store_name')}</Typography>\n                    </Box>\n                    <Box width={\"15%\"} display=\"flex\" alignItems={\"center\"} justifyContent={\"center\"}>\n                        <Typography color={colors.grey[100]} variant=\"h5\" fontWeight=\"500\">{t('status')}</Typography>\n                    </Box>\n                    <Box width={\"15%\"} display=\"flex\" alignItems={\"center\"} justifyContent={\"center\"}>\n                        <Typography color={colors.grey[100]} variant=\"h5\" fontWeight=\"500\">{t('products')}</Typography>\n                    </Box>\n                    <Box width={\"15%\"} display=\"flex\" alignItems={\"center\"} justifyContent={\"center\"}>\n                        <Typography color={colors.grey[100]} variant=\"h5\" fontWeight=\"500\">{t('machine')}</Typography>\n                    </Box>\n                    <Box width={\"15%\"} display=\"flex\" alignItems={\"center\"} justifyContent={\"center\"}>\n                        <Typography color={colors.grey[100]} variant=\"h5\" fontWeight=\"500\">{t('details')}</Typography>\n                    </Box>\n                </Box>\n                <Box\n                    backgroundColor={colors.primary[400]}\n                    borderRadius=\"10px\"\n                    height={\"100%\"}\n                    overflow={\"auto\"}\n                >\n                    {stores.map((store, i) => (\n                        <Box\n                            key={`${store.id}-${i}`}\n                            display=\"flex\"\n                            justifyContent=\"space-between\"\n                            alignItems=\"center\"\n                            borderBottom={`3px solid ${colors.primary[500]}`}\n                            p=\"10px\"\n                        >\n                            <Box width={\"15%\"} display=\"flex\" alignItems={\"center\"} justifyContent={\"center\"} textAlign={\"center\"}>{store.name}</Box>\n                            <Box width={\"15%\"} display=\"flex\" alignItems={\"center\"} justifyContent={\"center\"} textAlign={\"center\"}>\n                                {(() => {\n                                    if (store.status.name === \"disable\") {\n                                        return (\n                                            <Typography variant=\"h5\" color={colors.primary[100]} sx={{ margin: \".5rem .5rem\" }}>\n                                                {t('disable')}\n                                            </Typography>)\n                                    }\n                                    else if (store.status.name === \"banned\") {\n                                        return (\n                                            <Typography variant=\"h5\" color={colors.redAccent[500]} sx={{ margin: \".5rem .5rem\" }}>\n                                                {t('banned')}\n                                            </Typography>)\n                                    }\n                                    else if (store.status.name === \"removed\") {\n                                        return (\n                                            <Typography variant=\"h5\" color={colors.redAccent[500]} sx={{ margin: \".5rem .5rem\" }}>\n                                                {t('deleted')}\n                                            </Typography>)\n                                    }\n                                    else {\n                                        return (\n                                            <Typography variant=\"h5\" color={colors.greenAccent[500]} sx={{ margin: \".5rem .5rem\" }}>\n                                                {t('normal')}\n                                            </Typography>)\n                                    }\n                                })()}\n                            </Box>\n\n                            {/* BUTTON TO MACHINE MANAGEMENT */}\n\n                            <Box\n                                width={\"15%\"}\n                                height={\"100%\"}\n                                display={\"flex\"}\n                                alignItems={\"center\"} justifyContent={\"center\"}\n                                borderRadius=\"4px\"\n                            >\n                                <Link\n                                    to={\"/commodity-management\"}\n                                    state={{\n                                        data: store,\n                                    }}\n                                >\n                                    <Button sx={{ color: colors.primary[100], border: \"1px solid\" + colors.grey[200], borderRadius: \"10px\", fontSize: \".9rem\", padding: \".5rem 1.5rem\" }}>\n                                        {t('manage')}\n                                    </Button>\n                                </Link>\n                            </Box>\n                            <Box\n                                width={\"15%\"}\n                                height={\"100%\"}\n                                display={\"flex\"}\n                                alignItems={\"center\"} justifyContent={\"center\"}\n                                borderRadius=\"4px\"\n                            >\n                                <Link\n                                    to={\"/machine-management\"}\n                                    state={{\n                                        data: store,\n                                    }}\n                                >\n                                    <Button sx={{ color: colors.primary[100], border: \"1px solid\" + colors.grey[200], borderRadius: \"10px\", fontSize: \".9rem\", padding: \".5rem 1.5rem\" }}>\n                                        {t('manage')}\n                                    </Button>\n                                </Link>\n                            </Box>\n                            <Box\n                                width={\"15%\"}\n                                display={\"flex\"}\n                                alignItems={\"center\"} justifyContent={\"center\"}\n                                borderRadius=\"4px\">\n                                <StoreListModal props={store} />\n                            </Box>\n                        </Box>\n                    ))}\n                </Box>\n            </Box>\n        </Box >\n    )\n}\n\nexport default StoreManagement"],"names":["areaData","checkoutSchema","yup","shape","name","required","status","brandId","brandName","principalName","principalLineUrl","principalEmail","email","StoreListModal","props","entityName","useSelector","state","entity","t","useTranslation","theme","useTheme","colors","tokens","palette","mode","useState","modal","setModal","setStatus","handleStatusChange","event","target","value","showPassword","setShowPassword","handleClickShowPassword","show","handleMouseDownPassword","preventDefault","btnTitle","confirmTitle","deleteTitle","unbanTitle","cityFilter","setCityFilter","areaFilter","setAreaFilter","selectedArea","setSelectedArea","handleCityChange","handleAreaChange","inputAddress","setInputAddress","address","coordinates","lat","lng","setLocation","id","intro","principalAccount","principalPassword","initialValues","setInitialValues","useLazyQuery","RemoveStore","ApolloRemoveStore","loading","error","data","useEffect","console","log","window","location","reload","UpdateStore","ApolloUpdateStore","data2","useQuery","GetStore","variables","args","data3","nonNullData","replaceNullWithEmptyString","getStore","brand","principal","account","lineUrl","cover","setCoverFileName","city","district","prevState","handleLocationSelect","geocodeByAddress","results","formattedAddress","address_components","long_name","getLatLng","latLng","handleDelete","confirm","UnbanStore","ApolloUnBanStore","data4","handleUnBan","e","reason","default_cover_900x300_filename","coverFileName","handleUploadCoverSucess","toggleModal","document","body","classList","add","remove","Loader","Error","Button","onClick","className","sx","color","primary","border","borderColor","blueAccent","Box","backgroundColor","m","onSubmit","values","description","coordinate","latitude","longitude","password","statusId","validationSchema","errors","touched","handleBlur","handleChange","handleSubmit","display","width","flexDirection","justifyContent","Typography","variant","mb","fontSize","fontWeight","textAlign","redAccent","greenAccent","CoverUpload","handleSuccess","imagePlaceHolder","getImgURL","type","TextField","fullWidth","label","onBlur","onChange","helperText","margin","borderRadius","FormControl","minWidth","InputLabel","Select","disabled","background","labelId","MenuItem","marginBottom","mr","onSelect","getInputProps","suggestions","getSuggestionItemProps","placeholder","map","suggestion","active","style","grey","cursor","padding","height","Object","keys","i","area","htmlFor","FilledInput","endAdornment","InputAdornment","position","IconButton","onMouseDown","edge","VisibilityOff","Visibility","FormHelperText","ConfirmModal","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","supportMatchMedia","React","matches","match","setMatch","useEnhancedEffect","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","getServerSnapshot","mediaQueryList","notify","getSnapshot","subscribe","useMediaQuery","queryInput","options","getThemeProps","replace","useMediaQueryImplementation","undefined","CreateStoreModal","setBrandInfo","GetBrandList","data1","brandListFilter","setBrandListFilter","brandList","setBrandList","managerGetBrands","handleBrandListChange","targetId","find","CreateStore","ApolloCreateStore","index","CreateStoreModal_B","BRAND_CreateStore","STORE_INIT_QUERY","searchFilter","brandRef","useRef","searchRef","limit","setLimit","offset","setOffset","handlePageChange","brandArraySearch","array","keyword","searchTerm","filter","RegExp","storeArraySearch","GetAllStores","BRAND_GetAllStores","STORE_GetAllStores","initStores","SetInitStores","stores","setStores","managerGetStores","getBrandPrincipal","brands","getStorePrincipal","p","alignItems","maxWidth","InputBase","textTransform","ml","pr","inputRef","citiesData","bgcolor","current","brandValue","storeValue","length","search","Search","fontsize","marginLeft","borderBottom","Pagination","onPageChange","Refresh","overflow","store","to"],"sourceRoot":""}